# -*- coding: utf-8 -*-
"""diabetes_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16VK5rR8XFAcq9Zy2AFh_kjoWGkKHfKmq
"""
import streamlit as st
import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler#Standardize features by removing the mean and scaling to unit variance.
from sklearn import svm #Support Vector Classification.
from sklearn.model_selection import train_test_split

data=pd.read_csv('/content/diabetes.csv')

data.head()

data.tail()

data.shape

data.describe()

data['Outcome'].value_counts()

data.groupby('Outcome').mean()

"""here we have to define that the Outcome is defined as-:
0->no diabetic
1->diabetic
"""

X=data.drop(columns='Outcome',axis=1)
Y=data['Outcome']

print(X)

print(Y)

#DATA STANDARDIZATION
scaler=StandardScaler()

scaler.fit(X)

#transform()-Perform standardization by centering and scaling.
standardized_data=scaler.transform(X)

X=standardized_data
Y=data['Outcome']

print(X)

print(Y)

#Now we will apply train_test_split function to  split our data into train data and test data 
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X_train.shape,X_test.shape,X.shape)

#model training usin SVM
classifier=svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

#model evaluation
#accuracy of train data
X_train_prediction=classifier.predict(X_train)
train_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('The acuracy of the train data is:',train_data_accuracy)

#accuracy of train data
X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('The acuracy of the test data is:',test_data_accuracy)

#making a predictive model:
input_data=(0,121,66,30,165,34.3,0.203,33)
#convert data to numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the data
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
std_data=scaler.transform(input_data_reshaped)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)
if (prediction==0):
 print('The patient is not diabetic')
else:
 print('The patient is diabetic')
